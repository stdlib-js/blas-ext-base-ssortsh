{
  "version": 3,
  "sources": ["../lib/gaps.json", "../lib/ssortsh.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[701,301,132,57,23,10,4,1]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30\u201332. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106\u201317. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar GAPS = require( './gaps.json' );\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30\u201332. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106\u201317. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar ssortsh = require( './ssortsh.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a single-precision floating-point strided array using Shellsort.\n*\n* @module @stdlib/blas-ext-base-ssortsh\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var ssortsh = require( '@stdlib/blas-ext-base-ssortsh' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var ssortsh = require( '@stdlib/blas-ext-base-ssortsh' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar ssortsh;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tssortsh = main;\n} else {\n\tssortsh = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ssortsh;\n\n// exports: { \"ndarray\": \"ssortsh.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,ICAzB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,4CAA6C,EACxEC,EAAS,QAAS,kCAAmC,EACrDC,EAAO,IAKPC,EAAQD,EAAK,OA+BjB,SAASE,EAASC,EAAGC,EAAOC,EAAGC,EAAS,CACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,GAAKC,IAAU,EACxB,OAAOC,EAWR,IARKD,EAAQ,IACZE,GAAU,IAENA,EAAS,EACbC,GAAU,EAAEJ,GAAKG,EAEjBC,EAAS,EAEJK,EAAI,EAAGA,EAAIX,EAAOW,IAEvB,IADAH,EAAMT,EAAMY,CAAE,EACRC,EAAIJ,EAAKI,EAAIV,EAAGU,IAIrB,GAHAH,EAAIL,EAAGE,EAAQM,EAAEP,CAAQ,EAGpB,CAAAP,EAAQW,CAAE,EAKf,KADAF,EAAMV,EAAiBY,CAAE,EACnBI,EAAID,EAAGC,GAAKL,IACjBE,EAAIN,EAAGE,GAASO,EAAEL,GAAKH,CAAQ,EAC1B,EAAAK,GAAKD,GAAK,EAAEF,GAAOG,IAAMD,KAFRI,GAAKL,EAK3BJ,EAAGE,EAAQO,EAAER,CAAQ,EAAIK,EAE1BN,EAAGE,EAAQO,EAAER,CAAQ,EAAII,EAG3B,OAAOL,CACR,CAKAR,EAAO,QAAUK,IC7GjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,4CAA6C,EACxEC,EAAS,QAAS,kCAAmC,EACrDC,EAAO,IAKPC,EAAQD,EAAK,OAgCjB,SAASE,EAASC,EAAGC,EAAOC,EAAGC,EAAQC,EAAS,CAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,GAAKC,IAAU,EACxB,OAAOC,EAOR,IAJKD,EAAQ,IACZE,GAAU,GACVC,IAAWJ,EAAE,GAAKG,GAEbM,EAAI,EAAGA,EAAIX,EAAOW,IAEvB,IADAH,EAAMT,EAAMY,CAAE,EACRC,EAAIJ,EAAKI,EAAIV,EAAGU,IAIrB,GAHAH,EAAIL,EAAGE,EAAQM,EAAEP,CAAQ,EAGpB,CAAAP,EAAQW,CAAE,EAKf,KADAF,EAAMV,EAAiBY,CAAE,EACnBI,EAAID,EAAGC,GAAKL,IACjBE,EAAIN,EAAGE,GAASO,EAAEL,GAAKH,CAAQ,EAC1B,EAAAK,GAAKD,GAAK,EAAEF,GAAOG,IAAMD,KAFRI,GAAKL,EAK3BJ,EAAGE,EAAQO,EAAER,CAAQ,EAAIK,EAE1BN,EAAGE,EAAQO,EAAER,CAAQ,EAAII,EAG3B,OAAOL,CACR,CAKAR,EAAO,QAAUK,ICzGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAU,IACVC,EAAU,IAKdF,EAAaC,EAAS,UAAWC,CAAQ,EAKzCH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAUD,EAEVC,EAAUC,EAMX,OAAO,QAAUD",
  "names": ["require_gaps", "__commonJSMin", "exports", "module", "require_ssortsh", "__commonJSMin", "exports", "module", "isNegativeZerof", "isnanf", "GAPS", "NGAPS", "ssortsh", "N", "order", "x", "stride", "offset", "flg", "gap", "v", "u", "i", "j", "k", "require_ndarray", "__commonJSMin", "exports", "module", "isNegativeZerof", "isnanf", "GAPS", "NGAPS", "ssortsh", "N", "order", "x", "stride", "offset", "flg", "gap", "v", "u", "i", "j", "k", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "ssortsh", "ndarray", "join", "tryRequire", "isError", "main", "ssortsh", "tmp"]
}
